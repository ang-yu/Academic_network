### ####

setwd("/Users/Ginger/Documents/Academics-network/")

### This is to extract the friend list via Twitter API

install.packages("twitteR")
install.packages("tm")
install.packages("rtweet")
install.packages("NLP")


library("twitteR")
library("NLP")
library("tm")
library("rtweet")


consumer_key <- 'VPXR0O6pTFZvRWL95fKp736s4'
consumer_secret <- '5Bb1TDnsCcC1U0BfHfALucPAdugFmK6G9wgvyElPue9LDJo5Us'
access_token <- '1143210205854892032-L9WgZxHZzLGfqFr6n9J4gqP0bQBTrf'
access_secret <- '8DMaWUl34MDvPRXzLwnpMdwaUhaFe9HMBynUy637ZvWlr'

setup_twitter_oauth(consumer_key,
                    consumer_secret,
                    access_token,
                    access_secret)

token <- create_token(
  app = "Academic_network",
  consumer_key,
  consumer_secret,
  access_token,
  access_secret)


name_list <- read.csv("top40_complete_080919.csv", header=T)

name_list$has_twitter <- 1
name_list$has_twitter[is.na(name_list$screenName)] <- 0
table(name_list$has_twitter)   ## 0: 560, 1:445

#gender x has_twitter
#table(name_list$has_twitter, name_list$gender)
#chisq.test(name_list$has_twitter, name_list$gender)

#create variable: generation 
#name_list$generation <- NA
#name_list$generation[name_list$job_yr<=2000] <- 1
#name_list$generation[2000<name_list$job_yr & name_list$job_yr<=2010] <- 2
#name_list$generation[2010<name_list$job_yr] <- 3

#generation x has_twitter 
#table(name_list$has_twitter, name_list$generation)
#chisq.test(name_list$has_twitter, name_list$generation)


#create twitter_list
twitter_list <- name_list[!is.na(name_list$screenName),]


# generate the data for the basic information for the users themselves

twitter_list$twitter_username <- as.character(twitter_list$screenName)
twitter_list$twitter_username <- gsub(" ", "", twitter_list$screenName) 

lookup_vector <- vector()
for (i in 1: length(twitter_list$twitter_username)) {
  
  lookup_vector[i] <- lookupUsers(twitter_list$twitter_username[i], includeNA=F)
  
}


followersCount <- vector()
friendsCount <- vector()
created <- vector()
description <- vector()
id <- vector()
lastStatus_created <- vector()
name <- vector()
location <- vector()
screenName <- vector()

for (i in 1: length(lookup_vector)) {
  
  followersCount[i] <- lookup_vector[[i]]$followersCount
  friendsCount[i] <- lookup_vector[[i]]$friendsCount
  created[i] <- as.character(as.Date(lookup_vector[[i]]$created))
  description[i] <- lookup_vector[[i]]$description
  id[i] <- lookup_vector[[i]]$id
  name[i] <- lookup_vector[[i]]$name
  location[i] <- lookup_vector[[i]]$location
  screenName[i] <- lookup_vector[[i]]$screenName
  
  # There are people who haven't tweeted anything, lastStatus_created will be NAs for them
  lastStatus_created[i] <- ifelse(!is.null(lookup_vector[[i]]$lastStatus$created), as.character(as.Date(lookup_vector[[i]]$lastStatus$created)), NA)
  
}

self_data <- as.data.frame(cbind(id, screenName, name, followersCount, friendsCount, created, description, lastStatus_created, location))
self_data$created <- as.Date(self_data$created)
self_data$lastStatus_created <- as.Date(self_data$lastStatus_created)


self_data_merged <- merge(self_data, twitter_list, by.x = "screenName", by.y = "twitter_username", all = T)
self_data_merged$followersCount <- as.numeric(as.character(self_data_merged$followersCount))
self_data_merged$friendsCount <- as.numeric(as.character(self_data_merged$friendsCount))

self_data_merged$active <- ifelse(substr(self_data_merged$lastStatus_created, 1, 4)==2019, 1, 0)
self_data_merged$active[is.na(self_data_merged$active)] <- 0   # for those who haven't tweeted ever
table(self_data_merged$active)


# gender inequality in # of followers
#table(self_data_merged$gender)
#t.test(self_data_merged$followersCount[self_data_merged$gender=="F"], self_data_merged$followersCount[self_data_merged$gender=="M"])


# asymmetric recognition ratio
#self_data_merged$ratio <- self_data_merged$followersCount/self_data_merged$friendsCount
#self_data_merged$ratio[self_data_merged$ratio==Inf] <- NA
#t.test(self_data_merged$ratio[self_data_merged$gender=="F"], self_data_merged$ratio[self_data_merged$gender=="M"])

# asymmetric recognition ratio among active users
#t.test(self_data_merged$ratio[self_data_merged$gender=="F" & self_data_merged$active==1], self_data_merged$ratio[self_data_merged$gender=="M" & self_data_merged$active==1])


# generational inequality in x followers  G1 vs G3
#t.test(self_data_merged$followersCount[name_list$generation==1], self_data_merged$followersCount[name_list$generation==3])
#t = -1.0405, df = 94.888, p-value = 0.3007


install.packages('here')
install.packages("readr")
library(here)
library(readr)


#for all 316 faculty in the dataset get friends
friends <- list()
for (a in 1:length(id)){
  friends[[a]] <- get_friends(id[a], retryonratelimit = T)
}
